---
title: "Team_SDM_OHW24"
format: html
editor: visual
---

```{r message = FALSE, warning = FALSE}
knitr::opts_chunk$set(message = FALSE, warning = FALSE)

```

# Jessie's Thesis SDM workflow

## Project Workflow

## Installing libraries

```{r}
  #required libraries for data retrieval, cleaning, and modeling
library(tidyverse)
library(yaml)
library(raster)
library(robis)
library(stars)
library(dismo)
library(terra)
library(maxnet)
library(ggplot2)
library(leaflet)
library(leafem)
library(lubridate)
library(biooracler)
```

Create YAML file to define all variables used in functions (spatial and temporal bounds, species names, and env layers)

```{r}
vars <- read_yaml("/Users/lizamaguire/Desktop/Thesis_work/Current_data_files_10_21/config2 (1).yaml")
sdm_data <- read.csv("/Users/lizamaguire/Desktop/Thesis_work/Current_data_files_10_21/Updated MeDMR data 10_10.csv")
```

## Get species data from Obis using function

```{r}
  #Input: Latin name of a marine species, Output: data frame with occurrence points
get_species_data <- function(spec_data, spec) {
  
    species_data <- read.csv(spec_data)
   species_data$Date <- ymd_hms(species_data$Date)
  
  # Extract the month and create a new column
  species_data$month <- month(species_data$Date)
  
# Swap Latitude and Longitude column names correctly
colnames(species_data)[colnames(species_data) == "Longitude"] <- "temp_long"
colnames(species_data)[colnames(species_data) == "Latitude"] <- "Longitude"
colnames(species_data)[colnames(species_data) == "temp_long"] <- "Latitude"


      filtered_data <- species_data %>%
    mutate(
      Number_Caught = as.numeric(Number_Caught),
      pa = ifelse(Common_Name == spec & Number_Caught > 0, 1, 0)
    )
    
    bounded_data <- filtered_data %>%
      filter(Latitude >= vars$latmin & Latitude <= vars$latmax &
               Longitude >= vars$lonmin & Longitude <= vars$lonmax) %>% 
      dplyr::select(Latitude, Longitude, Year, month, Season, Number_Caught, Common_Name, pa)
    
    obs_sf <- bounded_data %>% 
    sf::st_as_sf(
      coords = c("Longitude", "Latitude"),
      crs = st_crs(4326))
    return(obs_sf)
}

```

## Obtain and extract environmental data from BioOracle using functions

```{r}
  #Input: variables, output: raster stack
get_enviro_data <- function(envvars) {
  #layercodes <- var
  #dir = "ohw24_proj_sdm_us"
  env <- sdmpredictors::load_layers(envvars, equalarea = FALSE, rasterstack = TRUE)
  #Crop
  env <- st_as_stars(env)
  extent <- st_bbox(c(xmin = vars$lonmin, xmax = vars$lonmax, ymin = vars$latmin, ymax = vars$latmax), crs = st_crs(env))
  env_warped <- st_warp(env, dest = st_as_stars(extent))
  rc <- st_crop(x = env_warped, y = extent)
  return(rc)
}

  #extract specific environmental covariates 
  #ph <- get_enviro_data("BO_ph")
extractEnvData <- function(rasterStack, points) {
  env.stars <- terra::split(rasterStack)
  spec.env <- stars::st_extract(env.stars, sf::st_coordinates(points))
  spec.env.cleaned <- na.omit(spec.env)
  return(spec.env.cleaned)
}
```

## Creating pseudo-absence points and cropping it to environmental layer

```{r}
getNegativePoints <- function(species_data_sf) {
  # Filter the dataset to get only points where pa = 0
  negative_points <- speciesPoints %>% filter(pa == 0)
  # Check if there are any negative points
  if (nrow(negative_points) == 0) {
    stop("No negative points (pa = 0) found in the dataset.")
  }
  
  # Return the negative points as an sf object
  return(negative_points)
}
```

## Call functions to prep the data for model

```{r}
layers <- c(vars$envVars)
envRasterStack <- get_enviro_data(layers[1:5])
envRasterStack <- st_transform(envRasterStack, crs = 4326)
plot(envRasterStack)
speciesPoints <- get_species_data("/Users/lizamaguire/Desktop/Thesis_work/Current_data_files_10_21/Updated MeDMR data 10_10.csv", "Haddock")
absPoints <- getNegativePoints(speciesPoints)

pres <- extractEnvData(envRasterStack, speciesPoints) |> mutate(pa=1)

abs <- extractEnvData(envRasterStack, absPoints) |> mutate(pa=0)

allData <- rbind(pres, abs)

all_data_omit <- na.omit(allData)

head(all_data_omit)
```

## Fit the model

```{r}
  #sdm.model \<- maxnet::maxnet(presence_absence_df, environmental_df)}
  #responses \<- plot(sdm.model, type = "cloglog")
presence_absence_df <- all_data_omit %>%
  dplyr::select(pa)

environmental_df <- all_data_omit %>%
  dplyr::select(-c(pa))

  # Ensure that 'Presence' column is extracted as a numeric vector
presence_absence_vector <- presence_absence_df$pa

sdm_model <- gam(
  pa ~ s(BO21_tempmean_bdmax) + s(BO22_salinitymean_bdmax),
  data = all_data_omit,
  family = binomial(link = "logit")
)

  # Plot the response curves
responses <- plot(sdm.model, type = "logistic")

```

```{r}
plot(envRasterStack)
```

## Process future environmental scenario data to predict species distribution

```{r}
future_layers <- sdmpredictors::list_layers_future(marine = TRUE) %>% 
  filter(current_layer_code %in% c(vars$envVars)) %>% 
  filter(year == "2050") %>% 
  filter(scenario == "RCP26") %>% 
  filter(model == "AOGCM")
future_layers_list <- future_layers$layer_code

print(future_layers_list)

  #concatenate and stack all environmental raster layers 
BO21_tempmean_bdmax <- get_enviro_data(future_layers_list[1])
BO21_tempmean_ss <- get_enviro_data(future_layers_list[2])
BO22_chlomean_ss <- get_enviro_data(future_layers_list[3])
BO22_salinitymean_bdmax <- get_enviro_data(future_layers_list[4])
BO22_salinitymean_ss <- get_enviro_data(future_layers_list[5])
concat <- c(BO21_tempmean_bdmax, BO21_tempmean_ss, BO22_chlomean_ss, BO22_salinitymean_bdmax, BO22_salinitymean_ss)

names(concat) <- future_layers$current_layer_code

env_data_df <- as.data.frame(concat, na.rm = TRUE, xy = TRUE)  # If needed, use xy for coordinates

# Add the predicted values back to the dataframe
env_data_df$predicted <- predicted

# Ensure you have the x, y coordinates in the dataframe
# Now, convert it into a raster (stars object)
predicted_raster <- st_as_stars(
  env_data_df,
  dims = c("x", "y"),    # Specify the spatial dimensions
  values = "predicted"   # Specify the column with the predicted values
)

# Assign CRS if not already defined
st_crs(predicted_raster) <- st_crs(4326)

# Plot to verify
plot(predicted_raster)


m <- leaflet() %>%
  addTiles() %>%
  leafem::addStarsImage(
    predicted_raster,
    colors = viridis::viridis(256),
    opacity = 0.8
  )

m


# Predict species distribution based on the environmental data
predicted <- predict(sdm_model, newdata = env_data_df, type = "response")

  #logistic model type
clamp <- TRUE      
type <- "logistic"

predicted_stars <- st_as_stars(predicted)

print(dim(predicted))


# Check if it contains the right dimensions
print(st_dimensions(predicted_stars))

```

## Plot the SDM using leaflet

```{r}
# Create a leaflet map and add the predicted species distribution
m <- leaflet() %>%
  addTiles() %>%
  leafem::addStarsImage(
envRasterStack,              # Ensure this is a stars object
    colors = viridis::viridis(256), # Color palette
    opacity = 0.8                  # Set opacity
  )

# Display the map
m

```

## Plotting SDM for alternate year and climate scenario

```{r}
  #plotting SDM for the year 2100 in climate scenario RCP85
future_layers_RCP85 <- sdmpredictors::list_layers_future(marine = TRUE) %>% 
  filter(current_layer_code %in% c(vars$envVars)) %>% 
  filter(year == "2100") %>% 
  filter(scenario == "RCP85") %>% 
  filter(model == "AOGCM")
future_layers_list_RCP85 <- future_layers_RCP85$layer_code

  #concatenate and stack all environmental raster layers 
BO21_tempmean_bdmax <- get_enviro_data(future_layers_list_RCP85[1])
BO21_tempmean_ss <- get_enviro_data(future_layers_list_RCP85[2])
BO22_chlomean_ss <- get_enviro_data(future_layers_list_RCP85[3])
BO22_salinitymean_bdmax <- get_enviro_data(future_layers_list_RCP85[4])
BO22_salinitymean_ss <- get_enviro_data(future_layers_list_RCP85[5])
concat <- c(BO21_tempmean_bdmax, BO21_tempmean_ss, BO22_chlomean_ss, BO22_salinitymean_bdmax, BO22_salinitymean_ss)

names(concat) <- future_layers_RCP85$current_layer_code

  #logistic model type
clamp <- TRUE      
type <- "logistic"

  # Predict species distribution within the cropped area
predicted_RCP85 <- predict(sdm.model, concat)

plot(predicted_RCP85)
```

## Map SDM for RCP85 in year 2100 in leaflet and visualize results

```{r}
library(leaflet)
m <- leaflet() %>% 
  addTiles() %>% 
  leafem::addStarsImage(predicted_RCP85, 
                        colors = viridis::viridis(256), 
                        opacity = 0.8)

m
```
